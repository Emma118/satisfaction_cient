name: CI Pipeline (Without Scraping)

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

jobs:
  build-and-test:
    runs-on: ubuntu-latest

    steps:
    # Étape 1 : Vérifier le code source
    - name: Checkout repository
      uses: actions/checkout@v3

    # Étape 2 : Installer les dépendances pour Flask et Dash
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.9'

    - name: Install Flask and Dash dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r flask_api/requirements.txt
        pip install -r dash_app/requirements.txt

    # Étape 3 : Exécuter les tests unitaires (Flask et Dash uniquement)
    - name: Run tests
      run: |
        pytest flask_api/tests --maxfail=5 --disable-warnings
        pytest dash_app/tests --maxfail=5 --disable-warnings

  build-and-push-docker:
    runs-on: ubuntu-latest
    needs: build-and-test

    steps:
    # Étape 1 : Vérifier le code source
    - name: Checkout repository
      uses: actions/checkout@v3

    # Étape 2 : Log in to Docker Hub
    - name: Log in to Docker Hub
      uses: docker/login-action@v2
      with:
        username: ${{ secrets.DOCKER_USERNAME }}
        password: ${{ secrets.DOCKER_PASSWORD }}

    # Étape 3 : Construire et tagger les images Docker (sans Scraper)
    - name: Build and tag Docker images
      run: |
        docker build -t your-dockerhub-username/flask-api:latest -f flask_api/Dockerfile flask_api
        docker build -t your-dockerhub-username/dash-app:latest -f dash_app/Dockerfile dash_app

    # Étape 4 : Pousser les images sur Docker Hub
    - name: Push Docker images
      run: |
        docker push your-dockerhub-username/flask-api:latest
        docker push your-dockerhub-username/dash-app:latest
